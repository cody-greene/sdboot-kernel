#!/usr/bin/env bash

BOOT=$(bootctl -p)
MACHINE_ID=$(cat /etc/machine-id)

if [[ -z ${MACHINE_ID} ]]; then
  echo "Error: Failed to get the machine-id"
  echo "see: man machine-id"
  exit 1
fi

usage() {
  echo "Usage: sdboot-kernel [action]"
  echo ""
  echo "Actions:"
  echo "  all      Run 'initrd' & 'entries' for all available kernels"
  echo "  initrd   Generate presets and run mkinitcpio, placing initrd in"
  echo "           \$BOOT/MACHINE_ID/KERNEL_VERSION/"
  echo "  entries  Generate systemd-boot loader entries and install kernels & ucode to"
  echo "           \$BOOT"
  echo "  remove   Remove orphaned sdboot entries and mkinitcpio presets"
  echo "           note: entries for other machine-ids are untouched"
  echo ""
  echo "\$BOOT = EFI system partiton; /efi, /boot or /boot/efi"
  exit 1
}

PRESET_TEMPLATE="
# generated by sdboot-kernel
ALL_config='/etc/mkinitcpio.conf'
ALL_kver='%VMLINUZ%'
PRESETS=('default')
default_image='%ENTRY_DIR_ABS%/initrd'
"

list_kernels() {
  kernels=() # output variable
  while read -r kernel; do
    kernels+=("${kernel}")
  done < <(find /usr/lib/modules -maxdepth 2 -type f -name vmlinuz)
}

# expects "/usr/lib/modules/*/vmlinuz" on stdin
# otherwise searches for all installed kernels
create_initrds() {
  args=()
  kernels=()
  [[ -t 0 ]] && all=1 # true is stdin is unavailable

  (( ! all )) && while read -r line; do
    [[ "$line" != */vmlinuz ]] && { all=1; break; }

    if ! read -r pkgbase > /dev/null 2>&1 < "/${line%/vmlinuz}/pkgbase"; then
      # if the kernel has no pkgbase, we skip it
      continue
    fi

    kernels+=("/${line}")
    args+=(-p "${pkgbase}")
  done

  if (( all )); then
    args=(-P)
    list_kernels
  fi

  # create a mkinitcpio preset for each kernel
  for kernel in "${kernels[@]}"; do
    version=$(basename "${kernel%/vmlinuz}")
    packagename=$(cat "${kernel%/vmlinuz}/pkgbase")
    preset_file="/etc/mkinitcpio.d/${packagename}.preset"
    entry_dir="${BOOT}/${MACHINE_ID}/${version}"

    echo ":: Generating ${preset_file}"

    mkdir -p "$entry_dir"

    subst="
      s|%ENTRY_DIR_ABS%|$entry_dir|g
      s|%VMLINUZ%|$kernel|g
    "
    echo -e "$PRESET_TEMPLATE" | sed "${subst}" | install -Dm644 /dev/stdin "$preset_file"
  done

  if (( ${#args[@]} )); then
    mkinitcpio "${args[@]}"
  fi
}

# expects "/usr/lib/modules/*/vmlinuz" on stdin
# otherwise searches for all installed kernels
create_entries() {
  # Set /etc/kernel/cmdline to enable kernel-install in a chroot
  # but only if it does not already exist and only if not already in a chroot
  if [[ ! -e /etc/kernel/cmdline && "$(stat -c %d:%i /)" == "$(stat -c %d:%i /proc/1/root/.)" ]]; then
    read -r -d '' -a line </proc/cmdline
    BOOT_OPTIONS=""
    for i in "${line[@]}"; do
      [[ "${i#initrd=*}" != "$i" ]] && continue
      [[ "${i#BOOT_IMAGE=*}" != "$i" ]] && continue
      BOOT_OPTIONS+="$i "
    done
    echo ":: Creating /etc/kernel/cmdline"
    echo "${BOOT_OPTIONS}" >/etc/kernel/cmdline
  fi

  [[ ! -t 0 ]] || all=1

  kernels=()

  (( ! all )) && while read -r line; do
    [[ "$line" != */vmlinuz ]] && { all=1; break; }
    kernels+=("/${line}")
  done

  (( all )) && list_kernels

  for kernel in "${kernels[@]}"; do
    version=$(basename "${kernel%/vmlinuz}")
    echo ":: Running kernel-install for $version"
    kernel-install add "${version}" "${kernel}" /boot/*ucode.img initrd
  done
}

remove() {
  list_kernels
  (( ${#kernels[@]} )) &&
    expected_versions=$(basename -a "${kernels[@]%/vmlinuz}")
  expected_pkgbases=""
  for kernel in "${kernels[@]}"; do
    expected_pkgbases+=$(cat "${kernel%/vmlinuz}/pkgbase")"\n"
  done

  # remove orphaned kernels from $BOOT
  while read -r dir; do
    actual=$(basename "$dir")
    grep -Fxq "$actual" <<<"$expected_versions" || {
      kernel-install remove "${actual}"
    }
  done < <(find "${BOOT}/${MACHINE_ID}" -maxdepth 1 -type d)

  # remove orphaned presets
  while read -r file; do
    actual=$(basename "$file" .preset)
    grep -Fxq "$actual" <<<"$expected_pkgbases" || rm "$file"
  done < <(find /etc/mkinitcpio.d -maxdepth 1 -type f -name '*.preset')
}

case $1 in
  all)
    create_initrds
    create_entries
    ;;
  initrd)
    create_initrds
    ;;
  entries)
    create_entries
    ;;
  remove)
    remove
    ;;
  *)
    usage
    ;;
esac
